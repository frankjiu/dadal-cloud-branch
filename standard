命名规范:
    包,类和接口: 以模块英文翻译命名, 通俗简短;
    方法:
        查:
            一个(主键或唯一键):
                条件: findById
            多个:
                有条件检索: search
                无条件列举: list
                涉及分页: page
            计数: count

        删: delete
        改: update
        增: insert
        批量插入:batchInsert
        批量删除:batchDelete
    变量:
        简洁, 见名知意, 不允许使用拼音.

    参数:
        传参使用xxxDto, 返回值使用xxxVo, 表数据使用对应的entity接收.


编码规范:
    项目中没有用到的多余代码要及时清除;
    一个接口或一个方法只允许完成一件事情;
    禁止编写复杂sql;
    禁止硬编码, 所有的配置一定要写到配置文件中;
    暂时无法实现的业务逻辑, 采用如下方法标记, 后面做具体说明:
        //TODO, 根据店铺 storeId 查询店铺相关的首页数据, 此处为模拟数据
    每晚提交当天代码, 并加备注;
    超过三个参数传递时要使用xxxDto包装
    要求必须传递的参数要做相应校验

日志记录:
    重要的业务操作要记录日志, 如金额类的业务操作等

注释:
    单行使用'//', 多行使用'/* */'
    XXXDto, Entity, XXXVo中的属性要做注释
    程序中非显而易见的逻辑要做注释
    建立数据库表时 字段和表 要做注释

注意:
    涉及金额的字段要使用BigDecimal类型
    在添加Swagger API的注解 @ApiOperation 的 notes 属性值时, 根据返回的xxxVo, 添加状态或类型的值做说明(如果存在):
        @ApiOperation(value = "查询xxx", notes = "0: 无效; 1: 有效")

补充规范:
    常量名必须全部为大写
    包路径规范: 1. 公司域名倒写,系统,子系统, 模块方式命名: com.dadal.cloud.customer.sys
    包名尽量简洁,一个单词或缩写, 必须小写
    接口处理: 1. 入参校验; 2.入参转换、清洗; 3.数据获取; 4.出参数据转换
    尽量使用缓存：配置类数据使用内存（一级）缓存；业务类数据使用redis（二级）缓存
    服务类基于业务领域模块划分,划分原则可以与业务表对应
    查询条件必须走索引
    查询结果按需读取,防止因字段过大造成数据传输开销
    原则上不允许应用使用delete语句,如有需要,必须记log
    服务设计为基于https短连接服务
    服务设计可并发执行、幂等性
    业务关键环节必须打印日志
    外部接口调用必须打印日志,并统计接口调用耗时,以便统计趋势图
    error级别以上的日志,必须记录关键业务信息,如方法的入参,错误发生时的变量现场,以便回溯追踪问题。
    禁止打印密码等敏感信息
